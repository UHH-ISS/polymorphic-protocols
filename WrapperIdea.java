/* This is the basic idea as to how these Wrappers could work
** Essentially, its 'just' wrapping around googles autogenerated API for the individual proto file
** the just is in quotation marks because it's actually much more effort than one might expect....
*/

package com.uhh.code.polymorph;

public class Nice2 {
    private Nice2() {}

    public interface TestProtoGet
    {
        int getAuthVersion();
        int getAuthProtocol();
        int getChallengeNumber();
    }

    public class TestProto implements TestProtoGet
    {
        private Nice.TestProto wrappedMessage;

        private TestProto() {}

        protected TestProto(Nice.TestProto message)
        {
            this.wrappedMessage = message;
        }

        @Override
        public int getAuthVersion() {
            return Integer.parseInt(wrappedMessage.getAuthVersion());
        }

        @Override
        public int getAuthProtocol() {
            return Integer.parseInt(wrappedMessage.getAuthProtocol());
        }

        @Override
        public int getChallengeNumber() {
            return Integer.parseInt(wrappedMessage.getChallengeNumber());
        }

        public Builder newBuilder()
        {
            var originalBuilder = Nice.TestProto.newBuilder();
            return new Nice2.TestProto.Builder(originalBuilder);
        }

        public class Builder implements Nice2.TestProtoGet
        {
            private Nice.TestProto.Builder wrappedBuilder;

            protected Builder(Nice.TestProto.Builder builder)
            {
                this.wrappedBuilder = builder;
            }

            @Override
            public int getAuthVersion() {
                return Integer.parseInt(wrappedBuilder.getAuthVersion());
            }

            @Override
            public int getAuthProtocol() {
                return Integer.parseInt(wrappedBuilder.getAuthProtocol());
            }

            @Override
            public int getChallengeNumber() {
                return Integer.parseInt(wrappedBuilder.getChallengeNumber());
            }

            public void setAuthVersion(Integer authVersion) {
                wrappedBuilder.setAuthVersion(String.valueOf(authVersion));
            }

            public void setAuthProtocol(Integer authProtocol) {
                wrappedBuilder.setAuthProtocol(String.valueOf(authProtocol));
            }

            public void setChallengeNumber(Integer challengeNumber) {
                wrappedBuilder.setChallengeNumber(String.valueOf(challengeNumber));
            }

            public Nice2.TestProto build()
            {
                return new Nice2.TestProto(wrappedBuilder.build());
            }
        }
    }
}
